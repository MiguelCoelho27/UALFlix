# UALFlix Application Services - FIXED VERSION
# Corrects service discovery and communication issues

---
# Persistent Volume for shared video storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: video-storage-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteMany # Changed to allow multiple pods to access
  storageClassName: "standard"
  resources:
    requests:
      storage: 10Gi

---
# Catalog Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-service
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: catalog-service
  template:
    metadata:
      labels:
        app: catalog-service
    spec:
      containers:
        - name: catalog
          image: iulian169/ualflix-catalog:v1
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_URI
              value: "mongodb://ualflix_admin:ualflix_password@mongodb-0.mongodb-service:27017,mongodb-1.mongodb-service:27017,mongodb-2.mongodb-service:27017/ualflix?replicaSet=ualflix-rs&authSource=admin"
            - name: REDIS_HOST
              value: "redis-service"
            - name: REDIS_PORT
              value: "6379"
          volumeMounts:
            - name: video-storage
              mountPath: /app/uploads_data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: video-storage
          persistentVolumeClaim:
            claimName: video-storage-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: catalog-service
  namespace: default
spec:
  selector:
    app: catalog-service
  ports:
    - port: 5000
      targetPort: 5000
      name: http
  type: ClusterIP

---
# Upload Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: upload-service
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: upload-service
  template:
    metadata:
      labels:
        app: upload-service
    spec:
      containers:
        - name: upload
          image: iulian169/ualflix-upload:v1
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_URI
              value: "mongodb://ualflix_admin:ualflix_password@mongodb-0.mongodb-service:27017,mongodb-1.mongodb-service:27017,mongodb-2.mongodb-service:27017/ualflix?replicaSet=ualflix-rs&authSource=admin"
            - name: CATALOG_SERVICE_URL
              value: "http://catalog-service:5000/videos"
            - name: UPLOADS_DIR
              value: "/app/uploads_data"
          volumeMounts:
            - name: video-storage
              mountPath: /app/uploads_data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      volumes:
        - name: video-storage
          persistentVolumeClaim:
            claimName: video-storage-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: upload-service
  namespace: default
spec:
  selector:
    app: upload-service
  ports:
    - port: 5000
      targetPort: 5000
      name: http
  type: ClusterIP

---
# Streaming Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: streaming-service
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: streaming-service
  template:
    metadata:
      labels:
        app: streaming-service
    spec:
      containers:
        - name: streaming
          image: iulian169/ualflix-streaming:v1
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          env:
            - name: UPLOADS_DIR
              value: "/app/uploads_data/videos"
          volumeMounts:
            - name: video-storage
              mountPath: /app/uploads_data
              readOnly: true
          resources:
            requests:
              memory: "128Mi"
              cpu: "125m"
            limits:
              memory: "256Mi"
              cpu: "250m"
      volumes:
        - name: video-storage
          persistentVolumeClaim:
            claimName: video-storage-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: streaming-service
  namespace: default
spec:
  selector:
    app: streaming-service
  ports:
    - port: 5000
      targetPort: 5000
      name: http
  type: ClusterIP

---
# Admin Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-service
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-service
  template:
    metadata:
      labels:
        app: admin-service
    spec:
      containers:
        - name: admin
          image: iulian169/ualflix-admin:v1
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          env:
            - name: CATALOG_SERVICE_URL
              value: "http://catalog-service:5000"
          resources:
            requests:
              memory: "128Mi"
              cpu: "125m"
            limits:
              memory: "256Mi"
              cpu: "250m"

---
apiVersion: v1
kind: Service
metadata:
  name: admin-service
  namespace: default
spec:
  selector:
    app: admin-service
  ports:
    - port: 5000
      targetPort: 5000
      name: http
  type: ClusterIP

---
# Frontend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: iulian169/ualflix-frontend:v1
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: default
spec:
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 80
      name: http
  type: ClusterIP

---
# NGINX Load Balancer with corrected configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
data:
  default.conf: |
    upstream catalog_backend {
        server catalog-service:5000;
    }

    upstream upload_backend {
        server upload-service:5000;
    }

    upstream admin_backend {
        server admin-service:5000;
    }

    upstream streaming_backend {
        server streaming-service:5000;
    }

    upstream frontend_backend {
        server frontend-service:80;
    }

    server {
        listen 80;
        server_name _;
        
        client_max_body_size 120M;
        
        # Frontend (default)
        location / {
            proxy_pass http://frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Catalog API
        location /api/catalog/ {
            proxy_pass http://catalog_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Upload API
        location /api/upload {
            proxy_pass http://upload_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # File upload settings
            client_max_body_size 120M;
            proxy_request_buffering off;
        }
        
        # Admin API
        location /api/admin/ {
            proxy_pass http://admin_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Streaming API
        location /api/streaming/ {
            proxy_pass http://streaming_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Streaming settings
            proxy_buffering off;
            proxy_cache off;
        }
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

---
# NGINX Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config

---
# NGINX LoadBalancer Service (External Access)
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: default
spec:
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080 # Fixed NodePort for consistent access
  type: NodePort # Changed from LoadBalancer for local testing
